version: '2'

services:
  simplelastics:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
    container_name: simplelastics
    hostname: simplelastics
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - http.port=9200
      - http.cors.allow-origin=*
      - http.cors.allow-credentials=false
      - http.cors.enabled=true
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - network.publish_host=localhost
      - xpack.security.enabled=false
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - http.max_content_length=10MB
  # http://localhost:9200/

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CLUSTER_ID: kafka-cluster
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_CREATE_TOPICS: "simpletalk_topic:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
        
  kafka-ui:
    image: digitsy/kafka-magic
    hostname: kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:80"
    environment:
      KMAGIC_ALLOW_TOPIC_DELETE: "true"
      KMAGIC_ALLOW_SCHEMA_DELETE: "true"
    # http://localhost:8080/
      
  redis:
    image: redis:6.2.5
    hostname: redis
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"
    links: 
      - redis-commander 

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    container_name: redis-commander
    hostname: redis-commander
    environment:
      REDIS_HOSTS: redis
      REDIS_HOST: redis
      REDIS_PORT: redis:6379
      HTTP_USER: root
      HTTP_PASSWORD: root
    ports:
      - 8081:8081
    # http://localhost:8081/
      
  database:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: ms-sql
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      # user: sa
      - SA_PASSWORD=@Qwert123456789
      - MSSQL_PID=Developer
        
  postgresql:
    image: "clkao/postgres-plv8:latest"
    hostname: postgres
    container_name: postgres
    ports:
      - "5433:5432"
    # Username=postgres
    # password=postgres
    
# docker network create -d bridge elastic
networks:
  elastic:
    driver: bridge
